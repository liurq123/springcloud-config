-- create database interviewTest;
use interviewTest;
-- create table `student`(
--     `s_id` varchar(20),
--     `s_name` varchar(20) not null default '',
--     `s_birth` varchar(20) not null default '',
--     `s_sex` varchar(10) not null default '',
--     primary key(`s_id`)
-- );

-- create table `course`(
--     `c_id` varchar(20),
--     `c_name` varchar(20) not null default '',
--     `t_id` varchar(20) not null,
--     primary key(`c_id`)
-- );

-- create table `teacher`(
--     `t_id` varchar(20),
--     `t_name` varchar(20) not null default '',
--     primary key(`t_id`)
-- );

-- CREATE TABLE `score`(
-- 	`s_id` VARCHAR(20),
-- 	`c_id`  VARCHAR(20),
-- 	`s_score` INT(3),
-- 	PRIMARY KEY(`s_id`,`c_id`)
-- );

-- 插入学生表测试数据
-- insert into student values('01','赵雷','1990-01-01','男');
-- insert into Student values('02' , '钱电' , '1990-12-21' , '男');
-- insert into Student values('03' , '孙风' , '1990-05-20' , '男');
-- insert into Student values('04' , '李云' , '1990-08-06' , '男');
-- insert into Student values('05' , '周梅' , '1991-12-01' , '女');
-- insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
-- insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
-- insert into Student values('08' , '王菊' , '1990-01-20' , '女');
-- 课程表测试数据
-- insert into Course values('01' , '语文' , '02');
-- insert into Course values('02' , '数学' , '01');
-- insert into Course values('03' , '英语' , '03');

-- --教师表测试数据
-- insert into Teacher values('01' , '张三');
-- insert into Teacher values('02' , '李四');
-- insert into Teacher values('03' , '王五');

-- --成绩表测试数据
-- insert into Score values('01' , '01' , 80);
-- insert into Score values('01' , '02' , 90);
-- insert into Score values('01' , '03' , 99);
-- insert into Score values('02' , '01' , 70);
-- insert into Score values('02' , '02' , 60);
-- insert into Score values('02' , '03' , 80);
-- insert into Score values('03' , '01' , 80);
-- insert into Score values('03' , '02' , 80);
-- insert into Score values('03' , '03' , 80);
-- insert into Score values('04' , '01' , 50);
-- insert into Score values('04' , '02' , 30);
-- insert into Score values('04' , '03' , 20);
-- insert into Score values('05' , '01' , 76);
-- insert into Score values('05' , '02' , 87);
-- insert into Score values('06' , '01' , 31);
-- insert into Score values('06' , '03' , 34);
-- insert into Score values('07' , '02' , 89);
-- insert into Score values('07' , '03' , 98);

-- 1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数
-- 方法1	
-- join 将 前者和后者 有关联的检索出来（只要有一方咩有关联起来的信息都不回出现）
-- left join 尽可能的返回左表的信息，即使左表没有信息关联右表，也要返回左表信息，右表为null
-- right join 同理
-- select a.*,b.s_score as 01_score,c.s_score as 02_score
-- from student a join score b on a.s_id=b.s_id and b.c_id='01'
-- left join score c on a.s_id=c.s_id and c.c_id='02' or c.c_id=null
-- where b.s_score > c.s_score


-- 方法2
select a.*,b.s_score as 01_score,c.s_score as 02_score
from student a,score b,score c
where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score>c.s_score 
			
-- 2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数
-- select a.*,b.s_score as 01_score,c.s_score as 02_score
-- from student a join score b on a.s_id=b.s_id a nd b.c_id='01'
-- left join score c on a.s_id=c.s_id and c.c_id='02' or c.c_id=null
-- where b.s_score<c.s_score



-- 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
-- select a.s_id,a.s_name,avg(s_score)
-- from student a join score b on a.s_id=b.s_id
-- group by s_id
-- having avg(s_score) >= 60 
-- group by 前面可以使用where生成表，后面可以使用having对生成表进行操作，展示最终表

-- 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩
		-- (包括有成绩的和无成绩的)
/* select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
	student b 
	left join score a on b.s_id = a.s_id
	GROUP BY b.s_id,b.s_name HAVING avg_score <60
	union */
/* select a.s_id,a.s_name,0 as avg_score from 
	student a 
	where a.s_id not in (
				select distinct s_id from score); */

-- select distinct s_id from score

-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩
-- select a.s_id as studentId,a.s_name as studentName,count(b.c_id) as total_class,sum(b.s_score) as total_score
-- from student a join score b on a.s_id=b.s_id
-- group by a.s_id
-- union
-- select b.s_id as studentId,b.s_name as studentName,0 as total_class,0 as total_score
-- from student b
-- where b.s_id not in (select distinct s_id from score)

-- 使用左连接，即使没有也会尽量显示出来
-- select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
-- 	student a 
-- 	left join score b on a.s_id=b.s_id
-- 	GROUP BY a.s_id;

-- 6、查询"李"姓老师的数量
-- 使用-：匹配单个字符
-- select count(*) as 李姓老师数量
-- from teacher
-- where t_name like '李_' or t_name like '李___' or t_name like '李____'

-- 使用%：匹配多个字符（任意个0或者多个都行）
-- select count(t_id) 
-- from teacher
-- where t_name like '李%'

-- 7、查询学过"张三"老师授课的同学的信息
-- select c.*,a.c_id
-- from score a join student c on c.s_id=a.s_id
-- where a.c_id in (select c_id from course b where b.t_id =(select t_id from teacher where t_name='张三'))

-- 8、查询没学过"张三"老师授课的同学的信息 
-- select d.*
-- from student d
-- where d.s_id not in(select c.s_id
-- from score a join student c on c.s_id=a.s_id
-- where a.c_id in (select c_id from course b where b.t_id =(select t_id from teacher where t_name='张三')))

-- select * from 
--     student c 
--     where c.s_id not in(
--         select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
--         select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));

-- 9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息
-- select c.*
-- from student c join (score a join score b on a.c_id = '01' and b.c_id='02' and a.s_id=b.s_id) on c.s_id=a.s_id

-- select a.*
-- from student a,score b,score c
-- where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01'and c.c_id='02'

-- join的另一种实现形式 where 表达
-- select a.*
-- from student a, score b,score c
-- where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' 

-- 10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息
-- select c.*
-- from student c,score a
-- where c.s_id = a.s_id and a.c_id = '01' and a.s_id not in (select b.s_id from score b where b.c_id = '02' )

-- select c.*
-- from student c join score a on c.s_id = a.s_id and a.c_id = '01'
-- where c.s_id not in (select b.s_id from score b where b.c_id = '02' )

-- select a.*
-- from student a
-- where a.s_id in (select s_id from score where c_id='01') and a.s_id not in (select s_id from score where c_id='02')

-- 11、查询没有学全所有课程的同学的信息             (2020-11-3  12:48)
-- 1、select a.*
-- from student a
-- where a.s_id not in (
-- 	select b.s_id from student b,score c where b.s_id = c.s_id 
-- 	and b.s_id in (select s_id from score where c_id='01')
-- 	and b.s_id in (select s_id from score where c_id='02')
-- 	and b.s_id in (select s_id from score where c_id='03') )

-- 2、select a.*
-- from  student a left join score b on a.s_id=b.s_id
-- group by a.s_id having count(b.c_id) < (select count(*) from course)

-- 3、select *
-- from student
-- where s_id not in (select s_id from score group by s_id having count(*)=(select count(distinct c_id) from course))

-- (实验)select s_id,count(*) from score group by s_id having count(*) < 3
-- (实验)select s_id,count(*) from score group by s_id 
-- (实验)select s_id,count(*) from score 

-- 12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息
-- select distinct a.*
-- from student a join score b on a.s_id=b.s_id
-- where b.s_id <> '01' and b.c_id in (select c_id from score where s_id='01')

-- 13、查询和"01"号的同学学习的课程完全相同的其他同学的信息 
-- select *
-- from student 
-- where s_id in 
-- -- 首先找到与01同学课程数量上相同的其他同学
-- (select s_id from score group by s_id having count(c_id) = (select count(c_id) from score where s_id='01'))
-- and s_id not in 
-- -- 接着找到01同学没学过课程的其他同学，排除他们
-- ( select s_id from score where c_id in (select distinct c_id from score where  c_id not in (select c_id from score where s_id='01')) group by s_id)
-- and s_id not in ('01')

-- select *
-- from student 
-- where s_id in 
-- -- 首先找到与01同学课程数量上相同的其他同学
-- (select s_id from score group by s_id having count(c_id) = (select count(c_id) from score where s_id='01'))
-- and s_id not in 
-- -- 接着找到01同学没学过课程的其他同学，排除他们
-- ( select distinct s_id from score where c_id in (select distinct c_id from score where  c_id not in (select c_id from score where s_id='01')) )
-- and s_id not in ('01')


-- 14、查询没学过"张三"老师讲授的任一门课程的学生姓名 
-- select a.s_name
-- from student a 
-- where a.s_id not in (select s_id from score where c_id in ( select c_id from course where t_id = (select t_id from teacher where t_name='张三')))

-- 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
-- select a.s_id,a.s_name,avg(b.s_score)
-- from student a left join score b on a.s_id = b.s_id
-- where a.s_id in 
-- (select s_id
-- from score
-- where s_score < 60
-- group by s_id
-- having count(*) >= 2)
-- group by a.s_id

-- 16、检索"01"课程分数小于60，按分数降序排列的学生信息
-- select a.*,b.c_id,b.s_score
-- from student a, score b
-- where a.s_id=b.s_id and b.c_id='01' and s_score < 60
-- order by b.s_score DESC

-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
-- select a.s_id,(select s_score from score where a.s_id=s_id and c_id='01') as 语文 ,
-- (select s_score from score where a.s_id=s_id and c_id='02') as 数学,
-- (select s_score from score where a.s_id=s_id and c_id='03') as 英语,
-- round(avg(s_score),2) as 平均值
-- from score a
-- group by a.s_id
-- order by 平均值 DESC

-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
-- 及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90
-- select a.c_id as 课程ID,a.c_name as 课程name,max(b.s_score) as 最高分,min(b.s_score) as 最低分,avg(b.s_score) as 平均分,
-- 	100*(sum(case when b.s_score>=60 then 1 else 0 end)/sum(case when b.s_score then 1 else 0 end)) as 及格率,
-- 	100*(sum(case when b.s_score>=70 and b.s_score <= 80 then 1 else 0 end)/sum(case when b.s_score then 1 else 0 end)) as 中等率,
-- 	100*(sum(case when b.s_score>=80 and b.s_score <= 90 then 1 else 0 end)/sum(case when b.s_score then 1 else 0 end)) as 优良率,
-- 	100*(sum(case when b.s_score>=90 then 1 else 0 end)/sum(case when b.s_score then 1 else 0 end)) as 优秀率
-- from course a join score b on a.c_id = b.c_id
-- group by b.c_id


-- select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
-- 	ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
-- 	ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
-- 	ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
-- 	ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
-- 	from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name

-- 19、按各科成绩进行排序，并显示排名
-- select a.s_id,a.c_id,
--         @i:=@i +1 as i保留排名,
--         @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
--         @score:=a.s_score as score
--     from (
--         select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
-- )a,(select @k:=0,@i:=0,@score:=0)s

-- select * from (select 
-- t1.c_id,
-- t1.s_score,
-- (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
-- FROM score t1 where t1.c_id='01'
-- order by t1.s_score desc) 
-- union
-- (select * from (select 
-- t1.c_id,
-- t1.s_score,
-- (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
-- FROM score t1 where t1.c_id='02'
-- order by t1.s_score desc) t2)
-- union
-- (select * from (select 
-- t1.c_id,
-- t1.s_score,
-- (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
-- FROM score t1 where t1.c_id='03'
-- order by t1.s_score desc) t3)



-- -- 编写SQL脚本以搜索每门课程分数均在80以上的所有学生的姓名
-- select a.s_name
-- from student a join score b on a.s_id=b.s_id 
-- where b.s_score > 80
-- group by a.s_id

-- IF SELECT Major FROM Students WHERE 
-- declare @i int 
-- declare @count int  
-- set @i= 0
-- set @count = (select count(*) from Students)

-- while @i<count
-- begin
-- 	IF  (select )  
-- 	update Student set demo = @i+5 where Uid=@i
--     set @i=@i +1 
-- end

-- update Student_Scores set Pass_Or_Fai = 'Pass' where Score >= 60 and (select Major from Students where Students.Student_ID=Student_Scores.Student_ID) = '软件工程';
-- update Student_Scores set Pass_Or_Fai = 'Fail' where Score < 60 and (select Major from Students where Students.Student_ID=Student_Scores.Student_ID) = '软件工程';
